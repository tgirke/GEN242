<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GEN242 – Homework Assignments</title>
    <link>/assignments/homework/</link>
    <description>Recent content in Homework Assignments on GEN242</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/assignments/homework/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Assignments: HW1 - Online Exercise and Basic GitHub Usage</title>
      <link>/assignments/homework/hw01/hw01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw01/hw01/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-online-excercise-databases-and-software-tools&#34;&gt;A. Online Excercise: Databases and Software Tools&lt;/h2&gt;
&lt;p&gt;This is an easy warm-up homework exposing students to a variety of online databases and software tools.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;http://www.ncbi.nlm.nih.gov&#34;&gt;http://www.ncbi.nlm.nih.gov&lt;/a&gt;, select &lt;code&gt;Protein&lt;/code&gt; database in dropdown, and then run query: &lt;code&gt;P450 &amp;amp; hydroxylase &amp;amp; human [organism]&lt;/code&gt;, select under &lt;em&gt;Source&lt;/em&gt; databases UniProtKB/Swiss-Prot
&lt;ol&gt;
&lt;li&gt;Report final query syntax from &lt;em&gt;Search Details&lt;/em&gt; field.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Save GIs of the final query result to a file. For this select under &lt;code&gt;Send to&lt;/code&gt; dropdown &lt;code&gt;GI List&lt;/code&gt; format.
&lt;ol&gt;
&lt;li&gt;Report the number of retrieved GIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Retrieve the corresponding sequences through &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/sites/batchentrez&#34;&gt;Batch-Entrez&lt;/a&gt; using GI list file as query input -&amp;gt; save sequences in FASTA format&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Generate multiple alignment and tree of these sequences using &lt;a href=&#34;http://multalin.toulouse.inra.fr/multalin/&#34;&gt;MultAalin&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;Save multiple alignment and tree to file&lt;/li&gt;
&lt;li&gt;Identify putative heme binding cysteine in multiple alignment&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Open corresponding &lt;a href=&#34;http://www.uniprot.org&#34;&gt;UniProt page&lt;/a&gt; and search for first P450 sequence in your list.
&lt;ol&gt;
&lt;li&gt;Compare putative heme binding cysteine with consensus pattern from Prosite database (&lt;a href=&#34;http://prosite.expasy.org/scanprosite/scanprosite_doc.html#mo_motifs&#34;&gt;Syntax&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Report corresponding Pfam ID&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/blast/Blast.cgi&#34;&gt;BLASTP&lt;/a&gt; against PDF database (use again first P450 in your list);
on result page click first entry in BLAST hit list (here &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/protein/3K9V_A?report=genbank&amp;amp;log$=protalign&amp;amp;blast_rank=1&amp;amp;RID=6BZUZS51016&#34;&gt;3K9V_A&lt;/a&gt;); then select &amp;lsquo;Identify Conserved Domains&amp;rsquo; on side bar; click grey bar labelled &amp;lsquo;CYP24A1&amp;rsquo;; then select &amp;lsquo;Interactive View&amp;rsquo; under &amp;lsquo;Structure&amp;rsquo; menu which will download a file named &amp;lsquo;pfam00067.cn3&amp;rsquo;.
&lt;ol&gt;
&lt;li&gt;Compare resulting alignment with result from MultAlin&lt;/li&gt;
&lt;li&gt;View 3D structure (pfam00067.cn3) in Cn3D*, save structure (screen shot) and highlight heme binding cysteine. Note, Cn3D* can be downloaded from &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/Structure/CN3D/cn3d.shtml&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*If there are problems in the last step (6.2) with the install of Cn3D, then please use this online only alternative: (i) click in the &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/protein/3K9V_A?report=genbank&amp;amp;log$=protalign&amp;amp;blast_rank=1&amp;amp;RID=6BZUZS51016&#34;&gt;3K9V_A&lt;/a&gt; page &lt;em&gt;&amp;lsquo;Protein 3D Structure&amp;rsquo;&lt;/em&gt; instead of &lt;em&gt;&amp;lsquo;Identify Conserved Domains&amp;rsquo;&lt;/em&gt;; (ii) choose one of the two structure entries provided on the subsequent page; (iii) select option &amp;ldquo;full-featured 3D viewer&amp;rdquo; in the bottom right corner of the structure image; (iv) choose the &amp;lsquo;&lt;em&gt;Details&amp;rsquo;&lt;/em&gt; tab on the right; (v) after this the structure of the protein is shown on the left and the underlying protein sequence on the right; (vi) highlight the heme binding cysteine in the structure by selecting it in the sequence; and (vii) then save the structure view to a PNG file or take a screenshot.&lt;/p&gt;
&lt;h2 id=&#34;b-homework-submission-to-a-private-github-repository&#34;&gt;B. Homework Submission to a Private GitHub Repository&lt;/h2&gt;
&lt;p&gt;Please assemble the results of this homework in one PDF file and upload it to your private course GitHub repository under &lt;code&gt;Homework/HW1/HW1.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;Most homework will be due one week after they are assigned. This one is due on Thu, April 13th at 6:00 PM. You have unlimited attempts. Students can edit and re-upload files
anytime before the deadline.&lt;/p&gt;
&lt;h2 id=&#34;homework-solution&#34;&gt;Homework solution&lt;/h2&gt;
&lt;p&gt;A solution for this homework is not required since the tasks are identical to the steps described above under sections HW1A-B.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW2 - Introduction to Biocluster and Linux</title>
      <link>/assignments/homework/hw02/hw02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw02/hw02/</guid>
      <description>
        
        
        &lt;h2 id=&#34;topic-linux-basics&#34;&gt;Topic: Linux Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Log into your user account on the HPCC cluster, and from there into a compute node with &lt;code&gt;srun&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;srun --x11 --partition=short --mem=2gb --cpus-per-task 4 --ntasks 1 --time 1:00:00 --pty bash -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download code from this page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://cluster.hpcc.ucr.edu/~tgirke/Linux.sh --no-check-certificate 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download Halobacterium proteome and inspect it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://ftp.ncbi.nlm.nih.gov/genomes/genbank/archaea/Halobacterium_salinarum/all_assembly_versions/GCA_004799605.1_ASM479960v1/GCA_004799605.1_ASM479960v1_protein.faa.gz
gunzip GCA_004799605.1_ASM479960v1_protein.faa.gz
mv GCA_004799605.1_ASM479960v1_protein.faa halobacterium.faa
less halobacterium.faa # press q to quit
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many protein sequences are stored in the downloaded file?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;&amp;gt;&#39; halobacterium.faa | wc
grep &#39;^&amp;gt;&#39; halobacterium.faa --count
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many proteins contain the pattern &lt;code&gt;WxHxxH&lt;/code&gt; or &lt;code&gt;WxHxxHH&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;egrep &#39;W.H..H{1,2}&#39; halobacterium.faa --count
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;less&lt;/code&gt; to find IDs for pattern matches or use &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;awk --posix -v RS=&#39;&amp;gt;&#39; &#39;/W.H..(H){1,2}/ { print &amp;quot;&amp;gt;&amp;quot; $0;}&#39; halobacterium.faa | less
awk --posix -v RS=&#39;&amp;gt;&#39; &#39;/W.H..(H){1,2}/ { print &amp;quot;&amp;gt;&amp;quot; $0;}&#39; halobacterium.faa | grep &#39;^&amp;gt;&#39; | cut -c 2- | cut -f 1 -d\ &amp;gt; myIDs
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a BLASTable database with &lt;code&gt;formatdb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;module load ncbi-blast/2.2.31+
makeblastdb -in halobacterium.faa -out halobacterium.faa -dbtype prot -hash_index -parse_seqids
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query BLASTable database by IDs stored in a file (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;myIDs&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;blastdbcmd -db halobacterium.faa -dbtype prot -entry_batch myIDs -get_dups -out myseq.fasta
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run BLAST search for sequences stored in &lt;code&gt;myseq.fasta&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;blastp -query myseq.fasta -db halobacterium.faa -outfmt 0 -evalue 1e-6 -out blastp.out
blastp -query myseq.fasta -db halobacterium.faa -outfmt 6 -evalue 1e-6 -out blastp.tab
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return system time and host name&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;date
hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additional exercise material in &lt;a href=&#34;https://hpcc.ucr.edu/manuals_linux-basics_shell.html&#34;&gt;Linux Manual&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;homework-assignment&#34;&gt;Homework assignment&lt;/h2&gt;
&lt;p&gt;Perform above analysis on the protein sequences from &lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/008/865/GCA_000008865.2_ASM886v2/GCA_000008865.2_ASM886v2_protein.faa.gz&#34;&gt;E. coli&lt;/a&gt;. A right click on the link will allow you to copy the URL so that it can be used together with &lt;code&gt;wget&lt;/code&gt;.
Record result from final BLAST command (with &lt;code&gt;outfmt 6&lt;/code&gt;) in text file named &lt;code&gt;myresult.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Upload result file (&lt;code&gt;myresult.txt&lt;/code&gt;) to your private course GitHub repository under &lt;code&gt;Homework/HW2/HW2.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;Most homeworks will be due one week after they are assigned. This one is due on Thu, April 13th at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solution&#34;&gt;Homework solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/static/custom/hw_solutions/hw2.sh&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW3 - Introduction to R</title>
      <link>/assignments/homework/hw03/hw03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw03/hw03/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-object-subsetting-import-and-export&#34;&gt;A. Object Subsetting, Import and Export&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Sort the rows of the &lt;code&gt;iris&lt;/code&gt; data frame by its first column and sort its columns alphabetically by column names.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Subset the first 12 rows, export the result to a text file and view it in a spreadsheet program like Excel or Google Sheets.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 3&lt;/strong&gt;: Change some column titles in your spreadsheet program, save the result to a tab delimited text file and import it back into R. Note, for this task you only want to include the &lt;code&gt;read.table&lt;/code&gt; command in the homework result (here R script).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you start it can be helpful to evaluate the structure of the &lt;code&gt;iris&lt;/code&gt; data set with the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(iris)
dim(iris)
colnames(iris)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;b-scatter-plots&#34;&gt;B. Scatter Plots&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Generate a scatter plot for the first two columns of the &lt;code&gt;iris&lt;/code&gt; data frame and color the dots by the &lt;code&gt;Species&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Use the &lt;code&gt;xlim/ylim&lt;/code&gt; arguments to set limits on the x- and y-axes so that all data points are restricted to the bottom left quadrant of the plot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again before you start, evaluate the structure of iris data set. The following commands are useful:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris[1:4,]
table(iris$Species)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;c-bar-plots&#34;&gt;C. Bar Plots&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Calculate the mean values for the &lt;code&gt;Species&lt;/code&gt; components of the first four columns in the &lt;code&gt;iris&lt;/code&gt; data frame. Organize the results in a matrix where the row names are the unique values from the &lt;code&gt;iris Species&lt;/code&gt; column and the column names are the names of the first four &lt;code&gt;iris&lt;/code&gt; columns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Generate two bar plots for the matrix generated in the previous step: one with stacked bars and one with horizontally arranged bars.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;d-h-analysis-worflow&#34;&gt;D-H. Analysis Worflow&lt;/h2&gt;
&lt;p&gt;The instructions for these homework assignments are &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rbasics/rbasics/#analysis-routine&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Assemble the code for solving the homework assignments A-H in a single R script (HW3.R) and upload it to your private GitHub repository under &lt;code&gt;Homework/HW3/HW3.R&lt;/code&gt;. Note, the preassembled workflow script provided for HW3H (&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rbasics/rbasics/#export-results-and-run-entire-exercise-as-script&#34;&gt;here&lt;/a&gt;) does not include the solutions for HW3A-C.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;This homework is due on Thu, April 20th at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solutions&#34;&gt;Homework Solutions&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/static/custom/hw_solutions/hw3_solution.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW4: Pairwise Alignments</title>
      <link>/assignments/homework/hw04/hw04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw04/hw04/</guid>
      <description>
        
        
        &lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;a-choice-of-sequence-type&#34;&gt;A. Choice of Sequence Type&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Which sequence type - amino acid or nucleotide - is more appropriate to search databases for remotely related sequences? Provide at least three reasons for your decision.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b-dynamic-programming-for-pairwise-alignments&#34;&gt;B. Dynamic Programming for Pairwise Alignments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Create manually (or write an R script for it) one global and one local alignment for the following two protein sequences using the Needleman-Wusch and Smith-Waterman algorithms, respectively:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;O15528: PFGFGKRSCMGRRLA
P98187: FIPFSAGPRNCIGQK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use in each case BLOSUM50 as substitution matrix and 8 as gap extension penalty (no extra penalty for gap opening).
Note, &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242//main/content/en/assignments/Homework/HW04/HW04b_StarterCode.R&#34;&gt;here&lt;/a&gt; is some helper code in R to create the initial matrix programmatically for upload to a spreadsheet program. Alternatively, solve the entire homework by writing an R script.
Your answers should contain the following components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manually populated dynamic programming matrices&lt;/li&gt;
&lt;li&gt;The optimal pairwise alignments created by traceback&lt;/li&gt;
&lt;li&gt;The final scores of the alignments&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;c-alignments-with-different-substitution-matrices&#34;&gt;C. Alignments with Different Substitution Matrices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Load the &lt;code&gt;Biostrings&lt;/code&gt; package in R, import the following two cytochrome P450 sequences &lt;code&gt;O15528&lt;/code&gt; and &lt;code&gt;P98187&lt;/code&gt; from &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/protein/O15528,P98187&#34;&gt;NCBI&lt;/a&gt; (save as &lt;code&gt;myseq.fasta&lt;/code&gt;), and create a global alignment with the &lt;code&gt;pairwiseAlignment&lt;/code&gt; function from &lt;code&gt;Biostrings&lt;/code&gt; as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(Biostrings)
myseq &amp;lt;- readAAStringSet(&amp;quot;myseq.fasta&amp;quot;, &amp;quot;fasta&amp;quot;)
(p &amp;lt;- pairwiseAlignment(myseq[[1]], myseq[[2]], type=&amp;quot;global&amp;quot;, substitutionMatrix=&amp;quot;BLOSUM50&amp;quot;))
writePairwiseAlignments(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your answers should address the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Record the scores for the scoring matrices BLOSUM50, BLOSUM62 and BLOSUM80.&lt;/li&gt;
&lt;li&gt;How and why do the scores differ for the three scoring matrices?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Assemble the results from this homework in one PDF file (HW4.pdf) and upload it to your private GitHub repository under &lt;code&gt;Homework/HW4/HW4.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;This homework is due on Thu, April 27 at 6:00 PM (~10 days).&lt;/p&gt;
&lt;h2 id=&#34;homework-solutions&#34;&gt;Homework Solutions&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/assignments/Homework/HW04/hw4_solution/HW4_key.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW4: Pairwise Alignment Solutions</title>
      <link>/assignments/homework/hw04/hw4_solution/hw4_key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw04/hw4_solution/hw4_key/</guid>
      <description>
        
        
        &lt;script src=&#34;../../rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../../rmarkdown-libs/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../../rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../../rmarkdown-libs/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;!---
- Compile from command-line
Rscript -e &#34;rmarkdown::render(&#39;HW4_key.Rmd&#39;, c(&#39;html_document&#39;, &#39;pdf_document&#39;), clean=FALSE)&#34;
--&gt;
&lt;div style=&#34;text-align: right&#34;&gt;
&lt;p&gt;Source code downloads:    
[ &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/content/en/assignments/Homework/HW04/hw4_solution/HW4_key.Rmd&#34;&gt;.Rmd&lt;/a&gt; ]    
[ &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/content/en/assignments/Homework/HW04/hw4_solution/pairwiseAlign_Fct.R&#34;&gt;pairwiseAlign_Fct.R&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;rendering-instructions&#34;&gt;Rendering Instructions&lt;/h1&gt;
&lt;p&gt;To render this R Markdown document, one needs to download the following files to the same directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/content/en/assignments/Homework/HW04/hw4_solution/HW4_key.Rmd&#34;&gt;HW4_key.Rmd&lt;/a&gt;: Rmd source file for this document&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/content/en/assignments/Homework/HW04/hw4_solution/pairwiseAlign_Fct.R&#34;&gt;pairwiseAlign_Fct.R&lt;/a&gt;: R script defining pairwise alignment functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/content/en/assignments/Homework/HW04/hw4_solution/bibtex.bib&#34;&gt;bibtex.bib&lt;/a&gt;: references cited in the text in BibTeX format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, one can render the report to HTML, PDF and other formats following the instructions below. Both the HTML and PDF versions are linked. Note, the rendering needs to be performed from the same directory where the downloaded &lt;code&gt;*.Rmd&lt;/code&gt;, &lt;code&gt;*.R&lt;/code&gt; and &lt;code&gt;*.bib&lt;/code&gt; files are located.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/assignments/Homework/HW04/hw4_solution/HW4_key.html&#34;&gt;HTML&lt;/a&gt;: this report in HTML format&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/assignments/Homework/HW04/hw4_solution/HW4_key.pdf&#34;&gt;PDF&lt;/a&gt;: corresponding PDF version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The HTML report can be rendered with &lt;code&gt;rmarkdown::render()&lt;/code&gt; as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rmarkdown::render(&#39;HW4_key.Rmd&#39;) # From R
Rscript -e &amp;quot;rmarkdown::render(&#39;HW4_key.Rmd&#39;)&amp;quot; # From command-line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To render a PDF file instead of HTML, one can instruct the rendering function to do so like this: &lt;code&gt;rmarkdown::render(&#39;HW4_key.Rmd&#39;, c(&#39;pdf_document&#39;)&lt;/code&gt;. To render to several formats with
a single command, one can concatenate the formatting values with &lt;code&gt;c(&#39;html_document&#39;, &#39;pdf_document&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;a-choice-of-sequence-type&#34;&gt;A. Choice of Sequence Type&lt;/h1&gt;
&lt;p&gt;Task 1: Which sequence type - amino acid or nucleotide - is more appropriate to search databases
for remotely related sequences? Provide at least three reasons for your decision.&lt;/p&gt;
&lt;p&gt;Answer: When coding sequences are expected to have weak similarities then one
should use protein sequences rather than DNA sequences for database searching,
because of (1) their higher information content (20 versus 4 letter alphabet),
as well as (2) the better scoring and (3) functional classification systems available
for amino acids.&lt;/p&gt;
&lt;h1 id=&#34;b-dynamic-programming-for-pairwise-alignments&#34;&gt;B. Dynamic Programming for Pairwise Alignments&lt;/h1&gt;
&lt;p&gt;Task 2: Create manually (or write an R script for it) one global and one local
alignment for the following two protein sequences using the Needleman-Wusch and
Smith-Waterman algorithms, respectively (Smith and Waterman 1981; Needleman and Wunsch 1970).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;O15528: PFGFGKRSCMGRRLA
P98187: FIPFSAGPRNCIGQK
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-functions&#34;&gt;Source functions&lt;/h2&gt;
&lt;p&gt;All alignment functions used in the following sections are defined in the downloaded R script file
that is named &lt;code&gt;pairwiseAlign_Fct.R&lt;/code&gt;. These functions are loaded with the &lt;code&gt;source()&lt;/code&gt; command below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;pairwiseAlign_Fct.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;input-sequences&#34;&gt;Input sequences&lt;/h2&gt;
&lt;p&gt;Define within R or import them (here former).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;S1 &amp;lt;- &amp;quot;PFGFGKRSCMGRRLA&amp;quot;
S2 &amp;lt;- &amp;quot;FIPFSAGPRNCIGQK&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional test sequences&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# S1 &amp;lt;- &amp;quot;HEAGAWGHEE&amp;quot;
# S2 &amp;lt;- &amp;quot;PAWHEAE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;global-alignment&#34;&gt;Global alignment&lt;/h2&gt;
&lt;p&gt;The alignment type choice is passed on to all following functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;align_type &amp;lt;- &amp;quot;global&amp;quot;
# align_type &amp;lt;- &amp;quot;local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dynamic-programming-matrices&#34;&gt;Dynamic programming matrices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dynMA &amp;lt;- dynProgMatrix(S1, S2, align_method=align_type, gap_penalty=8, substitutionMA=&amp;quot;BLOSUM50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The matrices are stored in a list and returned below. The path is indicated by three numbers in the &lt;code&gt;glob_ma_path&lt;/code&gt; matrix.
Their meaning is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: diagonal&lt;/li&gt;
&lt;li&gt;2: vertical (up)&lt;/li&gt;
&lt;li&gt;3: horizontal (left)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- end list --&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dynMA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $glob_ma
##      gp    P   F   G   F   G   K   R   S   C   M   G   R    R    L    A
## gp    0   -8 -16 -24 -32 -40 -48 -56 -64 -72 -80 -88 -96 -104 -112 -120
## F    -8   -4   0  -8 -16 -24 -32 -40 -48 -56 -64 -72 -80  -88  -96 -104
## I   -16  -11  -4  -4  -8 -16 -24 -32 -40 -48 -54 -62 -70  -78  -86  -94
## P   -24   -6 -12  -6  -8 -10 -17 -25 -33 -41 -49 -56 -64  -72  -80  -87
## F   -32  -14   2  -6   2  -6 -14 -20 -28 -35 -41 -49 -57  -65  -71  -79
## S   -40  -22  -6   2  -6   2  -6 -14 -15 -23 -31 -39 -47  -55  -63  -70
## A   -48  -30 -14  -6  -1  -6   1  -7 -13 -16 -24 -31 -39  -47  -55  -58
## G   -56  -38 -22  -6  -9   7  -1  -2  -7 -15 -19 -16 -24  -32  -40  -48
## P   -64  -46 -30 -14 -10  -1   6  -2  -3 -11 -18 -21 -19  -27  -35  -41
## R   -72  -54 -38 -22 -17  -9   2  13   5  -3 -11 -19 -14  -12  -20  -28
## N   -80  -62 -46 -30 -25 -17  -6   5  14   6  -2 -10 -18  -15  -16  -21
## C   -88  -70 -54 -38 -32 -25 -14  -3   6  27  19  11   3   -5  -13  -17
## I   -96  -78 -62 -46 -38 -33 -22 -11  -2  19  29  21  13    5   -3  -11
## G  -104  -86 -70 -54 -46 -30 -30 -19 -10  11  21  37  29   21   13    5
## Q  -112  -94 -78 -62 -54 -38 -28 -27 -18   3  13  29  38   30   22   14
## K  -120 -102 -86 -70 -62 -46 -32 -25 -26  -5   5  21  32   41   33   25
## 
## $glob_ma_path
##    gp P F G F G K R S C M G R R L A
## gp  0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
## F   2 1 1 3 1 3 3 3 3 3 3 3 3 3 3 3
## I   2 1 1 1 1 3 3 3 3 3 1 3 3 3 1 3
## P   2 1 2 1 1 1 1 3 1 3 3 1 3 3 3 1
## F   2 2 1 3 1 3 1 1 1 1 1 3 3 3 1 3
## S   2 2 2 1 2 1 1 3 1 3 3 3 3 3 3 1
## A   2 2 2 1 1 1 1 3 1 1 1 1 3 3 3 1
## G   2 2 2 1 2 1 3 1 1 3 1 1 3 3 3 3
## P   2 1 2 2 1 2 1 3 1 1 1 1 1 1 3 1
## R   2 2 2 2 1 2 1 1 3 3 3 3 1 1 3 3
## N   2 2 2 2 2 1 2 2 1 3 3 3 3 1 1 1
## C   2 2 2 2 1 2 2 2 2 1 3 3 3 3 3 1
## I   2 2 2 2 1 2 2 2 2 2 1 3 3 3 1 3
## G   2 2 2 1 2 1 2 2 2 2 2 1 3 3 3 3
## Q   2 2 2 2 2 2 1 2 2 2 2 2 1 1 3 3
## K   2 2 2 2 2 2 1 1 2 2 2 2 1 1 3 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;compute-alignment&#34;&gt;Compute alignment&lt;/h3&gt;
&lt;p&gt;The following &lt;code&gt;alignList&lt;/code&gt; stores all relevant results in a list, including dynamic
programming matrices, as well as the coordinates (named &lt;code&gt;path_coor&lt;/code&gt;) to highlight path in
dynamic progamming matrix (see below).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alignList &amp;lt;- alignmentTraceback(ma=dynMA[[1]], ma_path=dynMA[[2]], align_method=align_type) 
names(alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ma&amp;quot;        &amp;quot;ma_path&amp;quot;   &amp;quot;path_coor&amp;quot; &amp;quot;as1&amp;quot;       &amp;quot;consensus&amp;quot; &amp;quot;as2&amp;quot;      
## [7] &amp;quot;score&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# alignList$ma # dyn ma with scores
# alignList$ma_path # dyn ma with path
# alignList$path_coor # coordinates for path to auto highlight path in HTML/PDF table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;return-results&#34;&gt;Return results&lt;/h3&gt;
&lt;h4 id=&#34;traceback-in-matrix&#34;&gt;Traceback in matrix&lt;/h4&gt;
&lt;p&gt;The following prints the fully populated dynamic programming matrix where the traceback
path is highlighted in color.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;printColMa(alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper lightable-striped&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;gp&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;K&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;S&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;M&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;L&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;gp&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-40&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-48&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-56&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-64&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-72&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-80&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-88&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-96&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-104&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-112&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-120&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;-8&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-40&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-48&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-56&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-64&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-72&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-80&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-88&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-96&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-104&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;I&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;-16&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-40&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-48&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-54&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-62&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-70&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-78&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-86&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-94&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;-6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-12&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-17&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-25&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-33&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-41&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-49&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-56&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-64&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-72&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-80&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-87&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-20&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-28&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-35&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-41&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-49&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-57&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-65&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-71&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-79&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;S&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-40&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-15&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-23&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-31&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-39&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-47&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-55&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-63&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-70&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-48&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;-1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-31&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-39&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-47&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-55&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-58&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-56&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-9&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-15&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-24&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-40&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-48&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-64&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-18&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-27&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-35&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-41&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-72&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-54&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-17&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-9&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;13&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-12&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-20&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-28&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;N&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-80&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-62&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-25&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-17&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;14&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-18&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-15&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-16&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-21&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-88&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-70&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-54&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-25&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;27&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-17&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;I&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-96&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-78&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-62&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-33&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;29&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-11&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-104&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-86&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-70&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-54&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;37&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;Q&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-112&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-94&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-78&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-62&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-54&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-28&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-27&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-18&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;38&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;K&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-120&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-102&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-86&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-70&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-62&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-25&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-26&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;-5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;32&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;41&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;33&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;25&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;alignment-and-score&#34;&gt;Alignment and score&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;printAlign(x=alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  S1:  --PFGFGKRSCMGRRLA 
##         ||  | | | |     
##  S2:  FIPFSAGPRNCIGQK-- 
## 
##  Score of alignment: 25
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;local-alignment&#34;&gt;Local alignment&lt;/h2&gt;
&lt;p&gt;The alignment type choice is passed on to all following functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# align_type &amp;lt;- &amp;quot;global&amp;quot;
align_type &amp;lt;- &amp;quot;local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dynamic-programming-matrices-1&#34;&gt;Dynamic programming matrices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dynMA &amp;lt;- dynProgMatrix(S1, S2, align_method=align_type, gap_penalty=8, substitutionMA=&amp;quot;BLOSUM50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The matrices are stored in a list and returned below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dynMA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $loc_ma
##    gp  P  F  G  F  G  K  R  S  C  M  G  R  R  L  A
## gp  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
## F   0  0  8  0  8  0  0  0  0  0  0  0  0  0  1  0
## I   0  0  0  4  0  4  0  0  0  0  2  0  0  0  2  0
## P   0 10  2  0  0  0  3  0  0  0  0  0  0  0  0  1
## F   0  2 18 10  8  0  0  0  0  0  0  0  0  0  1  0
## S   0  0 10 18 10  8  0  0  5  0  0  0  0  0  0  2
## A   0  0  2 10 15 10  7  0  1  4  0  0  0  0  0  5
## G   0  0  0 10  7 23 15  7  0  0  1  8  0  0  0  0
## P   0 10  2  2  6 15 22 14  6  0  0  0  5  0  0  0
## R   0  2  7  0  0  7 18 29 21 13  5  0  7 12  4  0
## N   0  0  0  7  0  0 10 21 30 22 14  6  0  6  8  3
## C   0  0  0  0  5  0  2 13 22 43 35 27 19 11  4  7
## I   0  0  0  0  0  1  0  5 14 35 45 37 29 21 13  5
## G   0  0  0  8  0  8  0  0  6 27 37 53 45 37 29 21
## Q   0  0  0  0  4  0 10  2  0 19 29 45 54 46 38 30
## K   0  0  0  0  0  2  6 13  5 11 21 37 48 57 49 41
## 
## $loc_ma_path
##    gp P F G F G K R S C M G R R L A
## gp  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
## F   0 1 1 3 1 3 1 1 1 1 1 1 1 1 1 1
## I   0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## P   0 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1
## F   0 2 1 3 1 3 1 1 1 1 1 1 1 1 1 1
## S   0 1 2 1 3 1 1 1 1 1 1 1 1 1 1 1
## A   0 1 2 1 1 1 1 3 1 1 1 1 1 1 1 1
## G   0 1 1 1 2 1 3 3 1 1 1 1 3 1 1 1
## P   0 1 3 2 1 2 1 3 1 3 1 2 1 1 1 1
## R   0 2 1 1 1 2 1 1 3 3 3 1 1 1 3 1
## N   0 1 2 1 3 1 2 2 1 3 3 3 1 1 1 1
## C   0 1 1 2 1 1 2 2 2 1 3 3 3 3 1 1
## I   0 1 1 1 1 1 1 2 2 2 1 3 3 3 1 3
## G   0 1 1 1 3 1 3 1 2 2 2 1 3 3 3 3
## Q   0 1 1 2 1 2 1 3 1 2 2 2 1 1 3 3
## K   0 1 1 1 1 1 1 1 3 2 2 2 1 1 3 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;compute-alignment-1&#34;&gt;Compute alignment&lt;/h3&gt;
&lt;p&gt;Note: &lt;code&gt;alignList&lt;/code&gt; stores all relevant results in a list, including dynamic
programming matrices, as well as the coordinates (named &lt;code&gt;path_coor&lt;/code&gt;) to highlight the path in
the dynamic progamming matrix. This way one can easily generate a single dynamic programming matrix
with the traceback path highlighted by colors or arrows in an HTML or PDF document (see below).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alignList &amp;lt;- alignmentTraceback(ma=dynMA[[1]], ma_path=dynMA[[2]], align_method=align_type) 
names(alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ma&amp;quot;        &amp;quot;ma_path&amp;quot;   &amp;quot;path_coor&amp;quot; &amp;quot;as1&amp;quot;       &amp;quot;consensus&amp;quot; &amp;quot;as2&amp;quot;      
## [7] &amp;quot;score&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# alignList$ma # dyn ma with scores
# alignList$ma_path # dyn ma with path
# alignList$path_coor # coordinates for path to auto highlight path in HTML/PDF table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;return-results-1&#34;&gt;Return results&lt;/h3&gt;
&lt;h4 id=&#34;traceback-in-matrix-1&#34;&gt;Traceback in matrix&lt;/h4&gt;
&lt;p&gt;The following prints the fully populated dynamic programming matrix where the traceback
path is highlighted in color.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;printColMa(alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper lightable-striped&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;gp&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;K&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;S&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;M&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;L&lt;/p&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;gp&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;I&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;F&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;18&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;S&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;18&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;15&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;23&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;22&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;29&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;N&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;30&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;43&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;27&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;I&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;45&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;G&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;27&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;53&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;45&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;Q&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;45&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;54&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;46&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;38&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;K&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;48&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;&lt;span style=&#34;     color: red !important;&#34;&gt;57&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;49&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;p&gt;41&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;alignment-and-score-1&#34;&gt;Alignment and score&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;printAlign(x=alignList)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  S1:  PFGFGKRSCMGRR 
##       ||  | | | |   
##  S2:  PFSAGPRNCIGQK 
## 
##  Score of alignment: 57
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;c-different-substitution-matrices&#34;&gt;C. Different Substitution Matrices&lt;/h1&gt;
&lt;p&gt;Task 1: Load the Biostrings package in R, import the following two cytochrome
P450 sequences O15528 and P98187 from NCBI (save as myseq.fasta), and create a
global alignment with the pairwiseAlignment function from Biostrings as
follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(Biostrings)
myseq &amp;lt;- readAAStringSet(&amp;quot;myseq.fasta&amp;quot;, &amp;quot;fasta&amp;quot;)
(p &amp;lt;- pairwiseAlignment(myseq[[1]], myseq[[2]], type=&amp;quot;global&amp;quot;, substitutionMatrix=&amp;quot;BLOSUM50&amp;quot;))
writePairwiseAlignments(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your answers should address the following items:&lt;/p&gt;
&lt;p&gt;Record the scores for the scoring matrices BLOSUM50, BLOSUM62 and BLOSUM80.
How and why do the scores differ for the three scoring matrices?&lt;/p&gt;
&lt;p&gt;Answer 1: The scores for the three BLOSUM substitutions matrices are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BLOSUM50: 227&lt;/li&gt;
&lt;li&gt;BLOSUM62: 54&lt;/li&gt;
&lt;li&gt;BLOSUM80: -52&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Answer 2: Since the two sequences are relatively dissimilar (as determined by alignment view from
&lt;code&gt;writePairwiseAlignments(p)&lt;/code&gt;) it is expected that the BLOSUM matrices trained on less similar
sequences (&lt;em&gt;e.g.&lt;/em&gt; BLOSUM50) result in higher scores than those trained on more similar
sequences (&lt;em&gt;e.g.&lt;/em&gt; BLOSUM80).&lt;/p&gt;
&lt;h1 id=&#34;session-info&#34;&gt;Session Info&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.3.0 (2023-04-21)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Debian GNU/Linux 11 (bullseye)
## 
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 
## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0
## 
## locale:
##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
## 
## time zone: America/Los_Angeles
## tzcode source: system (glibc)
## 
## attached base packages:
## [1] stats4    stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] kableExtra_1.3.4    Biostrings_2.68.0   GenomeInfoDb_1.36.0
## [4] XVector_0.40.0      IRanges_2.34.0      S4Vectors_0.38.0   
## [7] BiocGenerics_0.46.0
## 
## loaded via a namespace (and not attached):
##  [1] jsonlite_1.8.4          compiler_4.3.0          crayon_1.5.2           
##  [4] webshot_0.5.4           xml2_1.3.4              stringr_1.5.0          
##  [7] bitops_1.0-7            jquerylib_0.1.4         systemfonts_1.0.4      
## [10] scales_1.2.1            yaml_2.3.7              fastmap_1.1.1          
## [13] R6_2.5.1                knitr_1.42              bookdown_0.33          
## [16] munsell_0.5.0           svglite_2.1.1           GenomeInfoDbData_1.2.10
## [19] bslib_0.4.2             rlang_1.1.1             stringi_1.7.12         
## [22] cachem_1.0.7            xfun_0.39               sass_0.4.5             
## [25] viridisLite_0.4.1       cli_3.6.1               magrittr_2.0.3         
## [28] zlibbioc_1.46.0         digest_0.6.31           rvest_1.0.3            
## [31] rstudioapi_0.14         lifecycle_1.0.3         vctrs_0.6.2            
## [34] evaluate_0.20           glue_1.6.2              blogdown_1.16          
## [37] RCurl_1.98-1.12         colorspace_2.1-0        rmarkdown_2.21         
## [40] httr_1.4.5              tools_4.3.0             htmltools_0.5.5
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references hanging-indent&#34;&gt;
&lt;div id=&#34;ref-Needleman1970-md&#34;&gt;
&lt;p&gt;Needleman, S B, and C D Wunsch. 1970. “A general method applicable to the search for similarities in the amino acid sequence of two proteins.” &lt;em&gt;J. Mol. Biol.&lt;/em&gt; 48 (3): 443–53. &lt;a href=&#34;https://doi.org/10.1016/0022-2836(70)90057-4&#34;&gt;https://doi.org/10.1016/0022-2836(70)90057-4&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Smith1981-ax&#34;&gt;
&lt;p&gt;Smith, T F, and M S Waterman. 1981. “Identification of common molecular subsequences.” &lt;em&gt;J. Mol. Biol.&lt;/em&gt; 147 (1): 195–97. &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/7265238&#34;&gt;http://www.ncbi.nlm.nih.gov/pubmed/7265238&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW5 - Programming in R</title>
      <link>/assignments/homework/hw05/hw05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw05/hw05/</guid>
      <description>
        
        
        &lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;div style=&#34;text-align: right&#34;&gt; 
Source code downloads: &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242//main/content/en/assignments/Homework/HW05/HW05.R&#34; target=&#34;_blank&#34;&gt;[ .R ]&lt;/a&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-reverse-and-complement-of-dna&#34;&gt;A. Reverse and complement of DNA&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Write a &lt;code&gt;RevComp&lt;/code&gt; function that returns the reverse and complement of a DNA sequence string. Include an argument that will allow to return only (i) the reversed sequence, (ii) the complemented sequence, or (iii) the reversed and complemented sequence. The following R functions will be useful for the implementation:&lt;/p&gt;
&lt;p&gt;Generate a short test DNA sequence&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;ATGCATTGGACGTTAG&amp;quot;)  
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ATGCATTGGACGTTAG&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vectorize sequence&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- substring(x, 1:nchar(x), 1:nchar(x)) 
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;A&amp;quot; &amp;quot;T&amp;quot; &amp;quot;G&amp;quot; &amp;quot;C&amp;quot; &amp;quot;A&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;G&amp;quot; &amp;quot;G&amp;quot; &amp;quot;A&amp;quot; &amp;quot;C&amp;quot; &amp;quot;G&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;A&amp;quot; &amp;quot;G&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reverse sequence&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- rev(x) 
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;G&amp;quot; &amp;quot;A&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;G&amp;quot; &amp;quot;C&amp;quot; &amp;quot;A&amp;quot; &amp;quot;G&amp;quot; &amp;quot;G&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;A&amp;quot; &amp;quot;C&amp;quot; &amp;quot;G&amp;quot; &amp;quot;T&amp;quot; &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Collapse sequence back to character string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- paste(x, collapse=&amp;quot;&amp;quot;)
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;GATTGCAGGTTACGTA&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Form complement of sequence&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chartr(&amp;quot;ATGC&amp;quot;, &amp;quot;TACG&amp;quot;, x) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;CTAACGTCCAATGCAT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Write a function that applies the &lt;code&gt;RevComp&lt;/code&gt; function to many sequences stored in a vector.&lt;/p&gt;
&lt;h2 id=&#34;b-translate-dna-into-protein&#34;&gt;B. Translate DNA into Protein&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Task 3&lt;/strong&gt;: Write a function that will translate one or many DNA sequences in all three reading frames into proteins. The following commands will simplify this task:&lt;/p&gt;
&lt;p&gt;Import lookup table of genetic code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;AAdf &amp;lt;- read.table(file=&amp;quot;http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/My_R_Scripts/AA.txt&amp;quot;, header=TRUE, sep=&amp;quot;\t&amp;quot;) 
AAdf[1:4,]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Codon AA_1 AA_3 AA_Full AntiCodon
## 1   TCA    S  Ser  Serine       TGA
## 2   TCG    S  Ser  Serine       CGA
## 3   TCC    S  Ser  Serine       GGA
## 4   TCT    S  Ser  Serine       AGA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generated named vector of relevant components&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;AAv &amp;lt;- as.character(AAdf[,2]) 
names(AAv) &amp;lt;- AAdf[,1] 
AAv
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## TCA TCG TCC TCT TTT TTC TTA TTG TAT TAC TAA TAG TGT TGC TGA TGG CTA CTG CTC CTT CCA CCG CCC CCT CAT 
## &amp;quot;S&amp;quot; &amp;quot;S&amp;quot; &amp;quot;S&amp;quot; &amp;quot;S&amp;quot; &amp;quot;F&amp;quot; &amp;quot;F&amp;quot; &amp;quot;L&amp;quot; &amp;quot;L&amp;quot; &amp;quot;Y&amp;quot; &amp;quot;Y&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; &amp;quot;*&amp;quot; &amp;quot;W&amp;quot; &amp;quot;L&amp;quot; &amp;quot;L&amp;quot; &amp;quot;L&amp;quot; &amp;quot;L&amp;quot; &amp;quot;P&amp;quot; &amp;quot;P&amp;quot; &amp;quot;P&amp;quot; &amp;quot;P&amp;quot; &amp;quot;H&amp;quot; 
## CAC CAA CAG CGA CGG CGC CGT ATT ATC ATA ATG ACA ACG ACC ACT AAT AAC AAA AAG AGT AGC AGA AGG GTA GTG 
## &amp;quot;H&amp;quot; &amp;quot;Q&amp;quot; &amp;quot;Q&amp;quot; &amp;quot;R&amp;quot; &amp;quot;R&amp;quot; &amp;quot;R&amp;quot; &amp;quot;R&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;I&amp;quot; &amp;quot;M&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; &amp;quot;N&amp;quot; &amp;quot;N&amp;quot; &amp;quot;K&amp;quot; &amp;quot;K&amp;quot; &amp;quot;S&amp;quot; &amp;quot;S&amp;quot; &amp;quot;R&amp;quot; &amp;quot;R&amp;quot; &amp;quot;V&amp;quot; &amp;quot;V&amp;quot; 
## GTC GTT GCA GCG GCC GCT GAT GAC GAA GAG GGA GGG GGC GGT 
## &amp;quot;V&amp;quot; &amp;quot;V&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;D&amp;quot; &amp;quot;D&amp;quot; &amp;quot;E&amp;quot; &amp;quot;E&amp;quot; &amp;quot;G&amp;quot; &amp;quot;G&amp;quot; &amp;quot;G&amp;quot; &amp;quot;G&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tripletize sequence and translate by name subsetting/sorting of AAv&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- gsub(&amp;quot;(...)&amp;quot;, &amp;quot;\\1_&amp;quot;, x) 
y &amp;lt;- unlist(strsplit(y, &amp;quot;_&amp;quot;)) 
y &amp;lt;- y[grep(&amp;quot;^...$&amp;quot;, y)] 
AAv[y] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GAT TGC AGG TTA CGT 
## &amp;quot;D&amp;quot; &amp;quot;C&amp;quot; &amp;quot;R&amp;quot; &amp;quot;L&amp;quot; &amp;quot;R&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Submit the 3 functions in one well structured and annotated R script to your
private GitHub repository under &lt;code&gt;Homework/HW5/HW5.R&lt;/code&gt;. The script should include
instructions on how to use the functions.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;This homework is due on Thu, April 27 at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solutions&#34;&gt;Homework Solutions&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/static/custom/hw_solutions/hw5_solution.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW6 - NGS Analysis Basics</title>
      <link>/assignments/homework/hw06/hw06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw06/hw06/</guid>
      <description>
        
        
        &lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;div style=&#34;text-align: right&#34;&gt; 
Source code downloads: &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242//main/content/en/assignments/Homework/HW06/HW06.R&#34; target=&#34;_blank&#34;&gt;[ .R ]&lt;/a&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-demultiplexing&#34;&gt;A. Demultiplexing&lt;/h2&gt;
&lt;p&gt;Write a demultiplexing function that accepts any number of
barcodes and splits a FASTQ file into as many subfiles as there are barcodes.
At the same time the function should remove low quality tails from the reads.
In both cases arguments should be provided so that the barcodes and cutoff
can be specified by the user.
The following function accomplishes the first step. Expand this function so
that it performs the second step as well. As test data set one can use the FASTQ
test files downloaded in the corresponding tutorial section &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rsequences/rsequences/#processing-fastq-files-with-shortread&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demultiplex &amp;lt;- function(x, barcode, nreads) {
	f &amp;lt;- FastqStreamer(x, nreads) 
	while(length(fq &amp;lt;- yield(f))) {
		for(i in barcode) {
			pattern &amp;lt;- paste(&amp;quot;^&amp;quot;, i, sep=&amp;quot;&amp;quot;)
			fqsub &amp;lt;- fq[grepl(pattern, sread(fq))] 
			if(length(fqsub) &amp;gt; 0) {
				writeFastq(fqsub, paste(x, i, sep=&amp;quot;_&amp;quot;), mode=&amp;quot;a&amp;quot;, compress=FALSE)
			}
		}
	}
	close(f)
}
demultiplex(x=fastq[1], barcode=c(&amp;quot;TT&amp;quot;, &amp;quot;AA&amp;quot;, &amp;quot;GG&amp;quot;), nreads=50)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;b-sequence-parsing&#34;&gt;B. Sequence Parsing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;code&gt;GFF&lt;/code&gt; from &lt;em&gt;Halobacterium sp&lt;/em&gt;  &lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.gff&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download genome sequence from &lt;em&gt;Halobacterium sp&lt;/em&gt; &lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.fna&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 1&lt;/strong&gt; Extract gene ranges, parse their sequences from genome and translate them into proteins&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 2&lt;/strong&gt; Reduce overlapping genes and parse their sequences from genome&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task 3&lt;/strong&gt; Generate intergenic ranges and parse their sequences from genome&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Useful commands&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;download.file(&amp;quot;https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.gff&amp;quot;, &amp;quot;data/AE004437.gff&amp;quot;)
download.file(&amp;quot;https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.fna&amp;quot;, &amp;quot;data/AE004437.fna&amp;quot;)
chr &amp;lt;- readDNAStringSet(&amp;quot;data/AE004437.fna&amp;quot;)
gff &amp;lt;- import(&amp;quot;data/AE004437.gff&amp;quot;)
gffgene &amp;lt;- gff[values(gff)[,&amp;quot;type&amp;quot;]==&amp;quot;gene&amp;quot;]
gene &amp;lt;- DNAStringSet(Views(chr[[1]], IRanges(start(gffgene), end(gffgene))))
names(gene) &amp;lt;- values(gffgene)[,&amp;quot;locus_tag&amp;quot;]
pos &amp;lt;- values(gffgene[strand(gffgene) == &amp;quot;+&amp;quot;])[,&amp;quot;locus_tag&amp;quot;]
p1 &amp;lt;- translate(gene[names(gene) %in% pos])
names(p1) &amp;lt;- names(gene[names(gene) %in% pos])
neg &amp;lt;- values(gffgene[strand(gffgene) == &amp;quot;-&amp;quot;])[,&amp;quot;locus_tag&amp;quot;]
p2 &amp;lt;- translate(reverseComplement(gene[names(gene) %in% neg]))
names(p2) &amp;lt;- names(gene[names(gene) %in% neg])
writeXStringSet(c(p1, p2), &amp;quot;./data/mypep.fasta&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Please submit the homework results in one well structured and annotated R
script to your private GitHub repository under &lt;code&gt;Homework/HW6/HW6.R&lt;/code&gt;. The script
should include instructions on how to use the functions.&lt;/p&gt;
&lt;h2 id=&#34;due-date&#34;&gt;Due date&lt;/h2&gt;
&lt;p&gt;This homework is due on Thu, May 4 at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solutions&#34;&gt;Homework Solutions&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/static/custom/hw_solutions/hw6_solution.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW7 - RNA-Seq Analysis</title>
      <link>/assignments/homework/hw07/hw07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw07/hw07/</guid>
      <description>
        
        
        &lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;div style=&#34;text-align: right&#34;&gt; 
Source code downloads: &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242//main/content/en/assignments/Homework/HW07/HW07.R&#34; target=&#34;_blank&#34;&gt;[ .R ]&lt;/a&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-unstranded-and-strand-specific-read-counting&#34;&gt;A. Unstranded and strand-specific read counting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task 1&lt;/strong&gt;: Rerun the &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/sprnaseq/sprnaseq/&#34;&gt;RNA-Seq
workflow&lt;/a&gt;
with the toy data sets up to the read quantification step
&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/sprnaseq/sprnaseq/#read-quantification&#34;&gt;here&lt;/a&gt;. Note,
the toy data set gets automatically loaded when intializing a workflow environment (directory structure) with the &lt;code&gt;genWorkenvir&lt;/code&gt;
function (see tutorial &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/sprnaseq/sprnaseq/#experimental-design&#34;&gt;here&lt;/a&gt;).
In the read quantification step with &lt;code&gt;summarizeOverlaps&lt;/code&gt; generate count
tables for exons by genes (&lt;code&gt;eByg&lt;/code&gt;) of the following three strand modes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unstranded&lt;/li&gt;
&lt;li&gt;Strand-specific for positive (sense) strand&lt;/li&gt;
&lt;li&gt;Strand-specific for negative (antisense) strand&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The solution for generating the unstranded read counts is given below. Note,
the upstream steps of the RNA-Seq workflow only need to be rerun to generate
the proper inputs for the read counting. Thus, they are not required to be
included in the homework results (see &lt;code&gt;HW7.R&lt;/code&gt; below).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summarizeOverlaps(eByg, bfl, mode=&amp;quot;Union&amp;quot;, 
                    ignore.strand=TRUE, 
                    # preprocess.reads=invertStrand,
                    inter.feature=FALSE, 
                    singleEnd=FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before attempting to solve this homework task please read the vignette
&lt;em&gt;Counting reads with &lt;code&gt;summarizeOverlaps&lt;/code&gt;&lt;/em&gt;
(&lt;a href=&#34;http://bioconductor.org/packages/release/bioc/html/GenomicAlignments.html&#34;&gt;here&lt;/a&gt;)
from the &lt;code&gt;GenomicAlignments&lt;/code&gt; package that defines the &lt;code&gt;summarizeOverlap&lt;/code&gt;
function. In addition, the help file for &lt;code&gt;?summarizeOverlaps&lt;/code&gt; provides useful information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task 2&lt;/strong&gt;: Provide R code that demonstrates that the two strand-specific count tables sum up to very similar values as the unstranded count table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task 3&lt;/strong&gt;: Explain the utility (biological relevance) of the different strand counting modes used under Task 1. Include your explanation as comment text in your homework script (see &lt;code&gt;HW7.R&lt;/code&gt; below).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, for Tasks 1-3 only the code and/or text needs to be included in the homework submission (no data/result files). For details see below.&lt;/p&gt;
&lt;h2 id=&#34;b-read-counting-for-different-feature-types&#34;&gt;B. Read counting for different feature types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task 4&lt;/strong&gt;: Compute strand-specific count tables for the positive (sense) strand of the following feature types. The help files of &lt;code&gt;?exonsBy&lt;/code&gt; and &lt;code&gt;?transcripts&lt;/code&gt; provide useful information for solving these tasks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Genes&lt;/li&gt;
&lt;li&gt;Exons&lt;/li&gt;
&lt;li&gt;Exons by genes&lt;/li&gt;
&lt;li&gt;Introns by transcripts&lt;/li&gt;
&lt;li&gt;5&amp;rsquo;-UTRs by transcripts&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, for Tasks 4 only include the code and/or text in your homework submission (no data/result files).&lt;/p&gt;
&lt;h2 id=&#34;c-deg-analysis&#34;&gt;C. DEG analysis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task 5&lt;/strong&gt;: Perform the DEG analysis with &lt;code&gt;edgeR&lt;/code&gt; as outlined under section 6 of the RNA-Seq workflow &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/sprnaseq/sprnaseq/#run-edger&#34;&gt;here&lt;/a&gt;.
Use in one case for the DEG analysis the unstranded count table as input (from Task 1.1) and in another the sense strand count table (from Task 1.2).
Compare the DEG result of the two methods in two separate 4-way Venn diagrams for the same sample comparisons used in the workflow example
&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/sprnaseq/sprnaseq/#venn-diagrams-of-deg-sets&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;4-way Venn diagram for unstranded count table&lt;/li&gt;
&lt;li&gt;4-way Venn diagram for sense strand count table&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, for Tasks 5 include both the code and the resulting images in your homework submission.&lt;/p&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Please submit the homework results in one well structured and annotated R
script to your private GitHub repository under &lt;code&gt;Homework/HW7/HW7.R&lt;/code&gt;. Instead
of an R script the homework can be submitted in form of an R Markdown (*Rmd) file.&lt;/p&gt;
&lt;h3 id=&#34;due-date&#34;&gt;Due date&lt;/h3&gt;
&lt;p&gt;This homework is due on Thu, May 11th at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solutions&#34;&gt;Homework Solutions&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tgirke/GEN242/main/static/custom/hw_solutions/hw7_solution.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assignments: HW8 - R Markdown Exercises</title>
      <link>/assignments/homework/hw08/hw08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/assignments/homework/hw08/hw08/</guid>
      <description>
        
        
        &lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;learning-r-markdown&#34;&gt;Learning R Markdown&lt;/h2&gt;
&lt;p&gt;To get started with the following homework tasks, log in to your HPCC account
and then &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;/bigdata/gen242/&amp;lt;user_name&amp;gt;&lt;/code&gt;. Then clone your new project
repos linked under your name in Colum J (2nd sheet) of the Course Planning Sheet linked from Canvas &lt;a href=&#34;https://elearn.ucr.edu/courses/46539&#34;&gt;here&lt;/a&gt;.
After this, &lt;code&gt;cd&lt;/code&gt; into your project&amp;rsquo;s repos and create as subdirectory called &lt;code&gt;HW8&lt;/code&gt;.
Subsequentially, download into the HW8 directory with &lt;code&gt;wget&lt;/code&gt; the &lt;code&gt;sample.Rmd&lt;/code&gt; and
&lt;code&gt;bibtex.bib&lt;/code&gt; files linked from the R Markdown Tutorial
&lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242-2021/tutorials/rmarkdown/rmarkdown/#initialize-a-new-r-markdown-rmd-script&#34;&gt;here&lt;/a&gt;.
Next, make the following changes (Tasks 1.-8.) to the downloaded R Markdown (Rmd) file. After
this render the modified Rmd to HTML format, and then submit both files to your project repos
on GitHub. The changes to include in the R Markdown are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Homework Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the beginning of the R Markdown report, add a short section describing the analysis steps you have chosen to perform as part of your challenge project.&lt;/li&gt;
&lt;li&gt;In the challenge project section, cite the reference(s) of the paper(s) you have chosen to present in class as part of your course project. For this add the
reference in BibTeX format to the downloaded &lt;code&gt;bibtex.tex&lt;/code&gt; file, and then cite it in the text of the Rmd file so that the properly rendered
citation shows up in the text and the corresponding reference is automatically added to the reference list at the end of the R Markdown when running &lt;code&gt;rmarkdown::render&lt;/code&gt;. Note, references in BibTeX format can be obtained from
Google Scholar, Paperpile or most other reference management software. More detailed information about managing references in R Markdown files is &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#citations-and-bibliographies&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#mathematical-equations&#34;&gt;mathematical equation&lt;/a&gt; in LaTeX format to the challenge project section and make sure it renders properly when generating the HTML report.&lt;/li&gt;
&lt;li&gt;Evaluate an R expression in the text as inline R code (see &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#inline-r-code&#34;&gt;here&lt;/a&gt;) of your challenge project, &lt;em&gt;e.g.&lt;/em&gt; mathematical or number from an existing R oject such as mean value of the first column of
the iris &lt;code&gt;data.frame&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#r-code-chunks&#34;&gt;code chunk&lt;/a&gt; that auto-generates the barplot for &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/assignments/homework/hw03/hw03/#c-bar-plots&#34;&gt;HW3C&lt;/a&gt;. This barplot should be embedded in the
rendered report without saving it intermediately to a file.&lt;/li&gt;
&lt;li&gt;Insert the targets file of your workflow (default toy data is sufficient) as an interactive table using the &lt;a href=&#34;https://rstudio.github.io/DT/&#34;&gt;&lt;code&gt;DT&lt;/code&gt; package&lt;/a&gt;. An example is given in the table section of the R Markdown manual &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#with-dtdatatable&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;rmarkdown::render()&lt;/code&gt; function to render the report to an HTML file (details are &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#render-rmd-script&#34;&gt;here&lt;/a&gt;). Important: for this assignment it is not relevant to evaluate the code chunks for the actual analysis steps of the analysis workflow. Only the chunks required for the above tasks need to be evaluated. Also, when embedding the targets file under step 6 into the report, the interactive table generated by the &lt;code&gt;DT&lt;/code&gt; package can only be included in the HTML version of the report. To including this table in the PDF version of the report, use the static &lt;code&gt;knitr::kable&lt;/code&gt; option instead as outlined &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/rmarkdown/rmarkdown/#with-knitrkable&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Submit the Rmd and HTML files for the report to the corresponding project repos on GitHub. Remember the details for adding, committing and pushing new files to a GitHub respos are given in the GitHub tutorial of GEN242 &lt;a href=&#34;https://girke.bioinformatics.ucr.edu/GEN242/tutorials/github/github/#exercise&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;homework-submission&#34;&gt;Homework submission&lt;/h2&gt;
&lt;p&gt;Please submit both the final Rmd and HTML files, where the above Tasks 1-8 have been fully addressed, to the &lt;code&gt;HW8&lt;/code&gt; subdirectory of your project repos
on GitHub.&lt;/p&gt;
&lt;h3 id=&#34;due-date&#34;&gt;Due date&lt;/h3&gt;
&lt;p&gt;This homework is due in one week on Thu, May 25th at 6:00 PM.&lt;/p&gt;
&lt;h2 id=&#34;homework-solution&#34;&gt;Homework Solution&lt;/h2&gt;
&lt;p&gt;All solutions for HW08 will be posted after the due date.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
